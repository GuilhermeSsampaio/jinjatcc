import React, { useEffect, useRef, useState, useContext } from "react";
import { Button } from "primereact/button";
import { Column } from "primereact/column";
import { DataTable } from "primereact/datatable";
import { Dialog } from "primereact/dialog";
import { Toast } from "primereact/toast";
import ContextoUsuario from "../../contextos/contexto_usuario";
import {
  servicoListar{{ entity.name_pascal }},
  servicoRemover{{ entity.name_pascal }},
  servicoCriar{{ entity.name_pascal }}
} from "../../servicos/servicos_{{ entity.name_kebab }}";
import {
  estilizarBotao,
  estilizarBotaoRemover,
  estilizarBotaoTabela,
  estilizarCard,
  estilizarColumnHeader,
  estilizarDataTable,
  estilizarDivBotoesAcao,
  estilizarFooterDialog,
  TAMANHOS,
  TEMA_PADRAO,
} from "../../utilitarios/estilos";
import mostrarToast from "../../utilitarios/mostrar_toast";
import FormCadastro{{ entity.name_pascal }} from "../../componentes/FormCadastro{{ entity.name_pascal }}";

export default function Pagina{{ entity.name_pascal }}Lista() {
  const toastRef = useRef(null);
  const { usuarioLogado } = useContext(ContextoUsuario);
  const [itens, setItens] = useState([]);
  const [loading, setLoading] = useState(true);
  const [itemSelecionado, setItemSelecionado] = useState(null);
  const [mostrarDialogConfirmacao, setMostrarDialogConfirmacao] = useState(false);
  const [mostrarModalCadastro, setMostrarModalCadastro] = useState(false);
  const corTema = usuarioLogado?.cor_tema || TEMA_PADRAO;

  useEffect(() => {
    async function carregarItens() {
      try {
        setLoading(true);
        const resposta = await servicoListar{{ entity.name_pascal }}();
        setItens(Array.isArray(resposta) ? resposta : (resposta?.data || []));
      } catch (erro) {
        mostrarToast(toastRef, "Erro ao carregar {{ entity.plural }}", "erro");
      } finally {
        setLoading(false);
      }
    }
    carregarItens();
  }, []);

  function handleAbrirModalRemocao(item) {
    setItemSelecionado(item);
    setMostrarDialogConfirmacao(true);
  }

  async function handleRemoverConfirmado() {
    try {
      await servicoRemover{{ entity.name_pascal }}(itemSelecionado.id);
      setItens((lista) => lista.filter((item) => item.id !== itemSelecionado.id));
      mostrarToast(toastRef, "Item removido com sucesso", "sucesso");
    } catch (erro) {
      mostrarToast(toastRef, "Erro ao remover item", "erro");
    } finally {
      setMostrarDialogConfirmacao(false);
      setItemSelecionado(null);
    }
  }

  async function handleCriarEntidade(dados) {
    try {
      const novaEntidade = await servicoCriar{{ entity.name_pascal }}(dados);
      setItens((lista) => [...lista, novaEntidade]);
      mostrarToast(toastRef, "Cadastro realizado com sucesso!", "sucesso");
    } catch (erro) {
      mostrarToast(toastRef, "Erro ao realizar o cadastro.", "erro");
    }
  }

  function colunaAcoesTemplate(rowData) {
    return (
      <div className={estilizarDivBotoesAcao()}>
        <Button
          icon="pi pi-pencil"
          className={estilizarBotaoTabela(corTema)}
          tooltip="Editar"
          tooltipOptions={% raw %}{{ position: "top" }}{% endraw %}
          onClick={() => console.log("Editar", rowData)}
        />
        <Button
          icon="pi pi-trash"
          className={estilizarBotaoTabela(corTema, true)}
          tooltip="Remover"
          tooltipOptions={% raw %}{{ position: "top" }}{% endraw %}
          onClick={() => handleAbrirModalRemocao(rowData)}
        />
      </div>
    );
  }

  const footerDialog = (
    <div className={estilizarFooterDialog()}>
      <Button
        label="Cancelar"
        onClick={() => setMostrarDialogConfirmacao(false)}
        className={estilizarBotao(corTema)}
      />
      <Button
        label="Remover"
        onClick={handleRemoverConfirmado}
        className={estilizarBotaoRemover(corTema)}
      />
    </div>
  );

  return (
    <div className="p-4">
      <Toast ref={toastRef} position="bottom-center" />

      <div className="flex justify-content-end mb-3">
        <Button
          label="Novo"
          icon="pi pi-plus"
          className={estilizarBotao(corTema)}
          onClick={() => setMostrarModalCadastro(true)}
        />
      </div>

      <DataTable
        value={itens}
        loading={loading}
        paginator
        rows={TAMANHOS.MAX_LINHAS_TABELA}
        emptyMessage="Nenhum item encontrado"
        responsiveLayout="stack"
        className={estilizarDataTable()}
      >
        {itens.length > 0 &&
          Object.keys(itens[0]).map((campo) => (
            <Column
              key={campo}
              field={campo}
              header={campo.charAt(0).toUpperCase() + campo.slice(1)}
              sortable
              headerClassName={estilizarColumnHeader(corTema)}
            />
          ))}
        <Column
          header="Ações"
          body={colunaAcoesTemplate}
          headerClassName={estilizarColumnHeader(corTema)}
        />
      </DataTable>

      <Dialog
        visible={mostrarDialogConfirmacao}
        onHide={() => setMostrarDialogConfirmacao(false)}
        header="Confirmar Remoção"
        footer={footerDialog}
        style={% raw %}{{ width: "350px" }}{% endraw %}
      >
        <div className="flex align-items-center">
          <i className="pi pi-exclamation-triangle mr-3" style={% raw %}{{ fontSize: "2rem" }}{% endraw %} />
          <span>Confirma a remoção do item selecionado?</span>
        </div>
      </Dialog>

      <FormCadastro{{ entity.name_pascal }}
        visivel={mostrarModalCadastro}
        aoFechar={() => setMostrarModalCadastro(false)}
        aoEnviar={handleCriarEntidade}
      />
    </div>
  );
}
